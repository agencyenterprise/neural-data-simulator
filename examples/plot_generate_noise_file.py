# flake8: noqa
"""
===============================================
Generate a noise file that can be loaded by NDS
===============================================

.. currentmodule:: neural_data_simulator

The goal of this example is to show how to generate a noise profile and
save it to a file that can be loaded by NDS in order to customize the
background noise of the simulated channels.
"""
# %%
# Generate random noise
# ---------------------
# For this example we will use random noise as input,
# but in practice you can use the average noise of your recording.
import colorednoise as cn

fs = 30000
samples = 100 * fs

# Generate gaussian noise
recorded_noise = cn.powerlaw_psd_gaussian(1.5, samples, fmin=0.0001)


# %%
# Calculate PSD of the noise and save it to file
# -----------------------------------------------
import os

import numpy as np

from neural_data_simulator.noise import calc_psd
from neural_data_simulator.util.runtime import get_configs_dir

frequencies, PSD = calc_psd(recorded_noise, fs)

# This file can be loaded by NDS when the noise type is set to "file"
file_path = os.path.join(get_configs_dir(), "psd.npz")
np.savez(file_path, PSD=PSD)


# %%
# Preview the noise as it will be generated by NDS
# ------------------------------------------------
import matplotlib.pyplot as plt

from neural_data_simulator.noise import synthesize_signal

# Desired std deviation of the time series
std = 1

# Convert back to time series
synth_noise = synthesize_signal(PSD, samples)
# Scale to desired std deviation
synth_noise = synth_noise / np.std(synth_noise) * std
# Center around zero
synth_noise = synth_noise - np.mean(synth_noise)

_, PSD_synth = calc_psd(synth_noise, fs)

# Plot time series
plt.plot(recorded_noise[0:10000])
plt.plot(synth_noise[0:10000])
plt.legend(["Recorded noise", "Synthesized noise"])
plt.xlabel("time [s]")
plt.show()
# %%
# Validate that the PSD of the synthesized noise matches the input PSD
# --------------------------------------------------------------------

# normalize frequencies to the interval [0, 0.5],
# where 0.5 corresponds to the Nyquist frequency
normalized_frequencies = frequencies / fs

# Plot input and resulted PSD
plt.loglog(normalized_frequencies, PSD)
plt.loglog(normalized_frequencies, PSD_synth)
plt.legend(["PSD of recorded noise", "PSD of synthesized noise"])
plt.xlabel("frequency [Hz]")
plt.tight_layout()

plt.show()
